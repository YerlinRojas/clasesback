-show dbs
muestra todas las bases de datos
-use (ponber nombre de BD) si la tiene la cambia/ si no la crea

-db muestra la que estoy actualmente
-show collections , muestra las coleciones
-db.createCollections('products') crea una nueva collections
-db.users.drop() , elimina collections en user es el nombre de la collections
-db.renameCollections() cambia el nombre de la coleciones
-db.products.insertOne({}) inserta un solo valor a la coleciones
-db.products.insertMany([{},{}]) en cada obj se ponen los parametros , products es el nombre de la collections donde se van a poner los parametros
-db.products.find() , esta busca todos los valores de porducts que es la collections
-db.products.find({name:'beers'}), de esta manera le pasamos el parametros que queremos saber de la collections y este parametro va accessibledevolver todos lo valores que coincidan con el parametro que le pasamos
-db.products.findOne({name:'beers'}) , esta manera solo va a traer solo EL valor unico que coincide con el parametro que le pasamos
-db.products.countDocuments(), indica cuantos documentos tiene en products que es la collections

FILTROS

db.coll.find({key:{$operator:val}})
operator:
$and: {$and:[{},{}]}
$or: {$or:[{},{}]}
$it: valores que son menores que el valor especifico
$ite: valores menores o iguales a un valor especifico
$gt: valores mayores a un valor especifico
$gte: valores mayores o iguales a un valor especifico
$ne: valores que NO son iguales a un valor especifico
$eq: selecciona los DOCUMENTs que son iguales a un valor especifico

ejmplo

>db.pets.find({$and: [{specie:'dog'}, {age: {$gte:2} }]})

>db.pets.find([
    $and:[
        {$or: [ {age: {$gt:5}} , {age: {$lt:3}} ] }
        {$or: [ {specie: 'dog'} , {specie:'cat'} ] }
    ]
])  



BUSQUEDA AVANZADA
db.coll.distinct( val ) , devuelve un array con los distintos valores que toma un determinado campo 
en documentos de la collections

db.coll.find({doc.subdoc:value}), se utiliza para filtrar subdocumentos

db.coll.find({name:/^Max$/i}) filtra utilizando expresiones regulares


PROYECCIONES
db.pets.find({},{name:1})
el segundo parametro de find son proyecciones, en este caso devuelve todos los array con name:
el 1 es true asi que va a traer todos los objetos que tengan name:

en este caso regresa tambien el id para quitar el id>>>>
db.pets.find({}, {name: 1}, _id: 0) , de esta manera quitaia el _id, el 0 es false

db.pets.find({}, {name:1, _id:0}).sort({age:1}) , de esta manera con el sort organiza de menor a mayor
db.pets.find({}, {name:1, _id:0}).sort({age:-1}) , de esta manera con el sort organiza de mayor a menor

db.pets.find({}, {name:1, _id:0}).sort({age:-1, name:-1}) se le puede agregar otro valor para filtrar


db.pets.find({}, {name:1, _id:0}).sort({age:-1, name:-1}).limit(1) se limita a mostrar la cantidad de la lista 

db.pets.find({}, {name:1, _id:0}).sort({age:-1, name:-1}).skip(2) salta los dos primeros de la lista, se usa para paginacion

UPTADE , DELETE
db.pets.updateOne({name:'firu'}, {$set:{name:'laika'}}) primer parametro es para saber que actualizar, el segundo es por lo que vamos a actualizar
db.pets.updateOne({name:'firu'}, {$set:{race:'pitbul'}}) aca el actualiza y le agrega un atributo nuevo 

db.pets.updateOne({name:'firu'}, {$unset:{race:'pitbul'}}) aca se quita el parametro

db.pets.updateMany({}, {$set: {animal: true}}) aca se le agrega un atributo new a todos los objetos

db.pets.deleteOne({key:valor}) aca generalmente se delete por _id

db.pets.deleteMany({age: {$gte:20}}) se elemina todos los que tengan >=20
